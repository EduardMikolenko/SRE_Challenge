TASK 1

To find the top 5 IP addreses I used the 'awk' utility. awk is used to extract and then print specific contents of a file and is often used to construct reports.

The command looked like this: awk '{print $3}' /var/log/apache/access.log | sort | uniq -c | sort -nr | head -5

Let me break it into several parts:

awk '{print $3}' /var/log/apache/access.log: This extracts the third column with IP addresses from the access.log file;
sort: this parameter soerts the IP addresses alphabetically;
uniq -c: with this parameter we count occurrences of each unique IP address;
sort -rn: the following function sorts the IP addresses based on their occurrence counts in descending order;
head -n 5: with this parameter we display the top 5 IP addresses along with their occurrence counts.

In result we have the following IP addresses that appear and the one that has abnormal amount of connections at the top:
1184 98.126.83.64
   1 99.90.171.165
   1 99.9.195.153
   1 99.81.223.86
   1 99.4.242.220
__________________________________________________
To find the amount of connections which resulted in HTTP statuses, we can use the 'grep' utility and simple command for that.

The full command is the following: grep " 200 " /var/log/apache/access.log | wc -l 

grep " 500 " access.log searches the access.log file for lines containing a space followed by "200" and another space. We make that in order to avoid partial matches.
The parameter wc -l counts the number of lines returned by the grep command.

In result we get the number of successful connections: 1849. There are no 500 codes, the server did not encounter an unexpected condition that prevented it from fulfilling the request.
__________________________________________________
To list the amounts of requests per minute we can use this awk command: 

awk '{split($2,a,":"); print a[1]":"a[2]}' /var/log/apache/access.log | sort | uniq -c | sort -rn

This command will use the second column that contains the time stamps and take into account that time format has ':' symbol in it. Then we will use sorting numerically. This command counts and lists the number of requests per minute. It's a short way to analyze the frequency of requests in this access log.

808 15:04
802 15:00
801 15:01
800 15:03
778 15:02
11 15:05

_________________________________________________
To find out the most frequent domain name accessing the server, we can use the following command:

awk '{print $5}' /var/log/apache/access.log | sort | uniq -c | sort -nr | head -1

This command refers to the fifth column that contains domain names and provides the most frequent one.

It's example2.com that appeared 2009 times.
_________________________________________________
The question is to determine whether all the requests that go to '/page.php' result in '499' code. If we check how many 499 requests we have, we can use the command: 

grep " 499 " /var/log/apache/access.log | wc -l

Based on the output we can see that the amount of requests with the '499' code are 379.

So with this information knowing that we have 379 cases with the '499' code, we can check if all of them were related to accessing this page '/page.php':

grep ' 499 ' access.log | grep '/page.php' | wc -l

We received 379.

To check if there were any connections with 200 code to this page, we can change the variable to '200'

We received 0.

This comes to result that all the connections to the page '/page.php' resulted in 499 HTTP code. Which means that the client did not wait long enough for the server to respond.
_________________________________________________
Based on the information provided and the content of the access log file, here are several potential anomalies and points of interest that could warrant further investigation. High volume from a single IP Address shows the fact that there were 1184 connections from a single IP address (98.126.83.64) is unusual and could indicate either a misconfigured client or potential malicious activity, such as a DoS attack. While 1849 connections from other addresses resulted in HTTP code 200, shows the high volume of successful connections in a short time frame could suggest a coordinated access pattern or a stress test on the server. The domain name "example2.com" appearing 2009 times suggests it's either a target of specific interest or part of a larger automated access pattern. Perhaps some server for this domain name is being undeer attack. However, if this is not the case, it might indicate targeted testing of vulnerabilities on the server.